generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Class {
  id        String    @id @default(uuid())
  name      String // 예: "A반", "B반"
  alias     String
  startDate DateTime // 예: 2024-12-09
  endDate   DateTime // 예: 2025-05-12
  students  User[]    @relation("ClassStudents")
  sections  Section[]
}

enum Role {
  STUDENT
  ADMIN
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  role        Role // 'student' | 'admin'
  createdAt   DateTime     @default(now())
  quizResults QuizResult[]
  answer      Answer[]
  class       Class?       @relation("ClassStudents", fields: [classId], references: [id])
  classId     String?
}

model Section {
  id       String    @id @default(uuid())
  title    String
  order    Int
  chapters Chapter[]
  class    Class?    @relation(fields: [classId], references: [id])
  classId  String?
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  order     Int
  quizzes   Quiz[]
  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId String?
}

model Quiz {
  id          String       @id @default(uuid())
  title       String
  description String
  order       Int
  chapter     Chapter      @relation(fields: [chapterId], references: [id])
  chapterId   String
  questions   Question[]
  results     QuizResult[]
}

enum QuestionType {
  OBJECTIVE
  SUBJECTIVE
}

model Question {
  id           String            @id @default(uuid())
  quiz         Quiz              @relation(fields: [quizId], references: [id])
  quizId       String
  type         QuestionType
  questionText String
  explanation  String? // 정답 해설 (선택)
  order        Int
  options      Option[] // 객관식 보기
  subjective   SubjectiveAnswer? // 주관식 정답
  answer       Answer[]
}

model Option {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  text       String
  isCorrect  Boolean // 정답 여부
}

model SubjectiveAnswer {
  id         String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @unique
  answerText String
}

model QuizResult {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  quiz         Quiz     @relation(fields: [quizId], references: [id])
  quizId       String
  score        Int
  correctCount Int
  totalCount   Int
  submittedAt  DateTime @default(now())
}

model Answer {
  id           String   @id @default(uuid())
  question     Question @relation(fields: [questionId], references: [id])
  questionId   String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  selectedText String // 주관식은 입력값, 객관식은 선택 보기 텍스트
  isCorrect    Boolean // LLM or 정답 비교로 채점
  similarity   Float? // 주관식일 경우 유사도 점수
  answeredAt   DateTime @default(now())
}
